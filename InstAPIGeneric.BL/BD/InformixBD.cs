using IBM.Data.Informix;
using InstAPIGeneric.Model;
using InstAPIGeneric.Model.DTO;
using System;
using System.Collections.Generic;
using System.Data;

namespace InstAPIGeneric.BL.BD
{
    /// <summary> Clase que define la ejecución de funciones debase de datos informix </summary>
    public class InformixBD
    {
        /// <summary> The conexion informi </summary>
        /// <autogeneratedoc />
        private readonly IfxConnection ConexionInformix;

        /// <summary> Contructor  </summary>
        public InformixBD()
        {
            ConexionInformix = new IBM.Data.Informix.IfxConnection();
        }

        /// <summary>  Método que retorna el resultado de procesar una consulta base de datos  </summary>
        /// <param name="conexion">conexion del motor de SQL</param>
        /// <param name="procedimiento">caracteristicas del procedimiento almacenado a ejecutar</param>
        /// <param name="parametros">Valor de los parametros a ejecutar</param>
        /// <returns>Configuracion de un resultado del proceso</returns>
        public ResultadoDTO ResutlDataTable(Catalogo_Conexiones conexion, Catalogo_Procedimientos_Funciones procedimiento, List<Parametro> parametros)
        {
            DataTable dt = new DataTable();
            ResultadoDTO res = new ResultadoDTO();

            try
            {
                ConexionInformix.ConnectionString = conexion.ConnectionString;
                var state = ConexionInformix.State;

                if (state == ConnectionState.Open)
                {
                    ConexionInformix.Close();
                }

                ConexionInformix.Open();

                using (IfxCommand ifxCmd = new IfxCommand(procedimiento.Nombre, ConexionInformix))
                {
                    ifxCmd.CommandType = CommandType.StoredProcedure;
                    if (parametros != null)
                    {
                        foreach (var parameter in parametros)
                        {
                            IfxParameter param = new IfxParameter();
                            param.ParameterName = parameter.Nombre;
                            param.Value = parameter.Valor;
                            ifxCmd.Parameters.Add(param);
                        }
                        IfxDataAdapter adapter = new IfxDataAdapter(ifxCmd);
                        adapter.Fill(dt);

                        res.Nombre = procedimiento.ValorMostar;
                        if (dt.Rows.Count > 0)
                        {
                            switch (dt.Rows.Count)
                            {
                                case 1:
                                    {
                                        res.Valor = dt.Rows[0].ItemArray;
                                        break;
                                    }
                                default:
                                    {
                                        foreach (DataRow row in dt.Rows)
                                        {
                                            res.Valores.Add(row.ItemArray);
                                        }
                                        break;
                                    }
                            }
                        }
                        res.Codigo = 0;
                        res.Mensaje = "Finalizada con exito";
                    }
                }
                ConexionInformix.Close();
            }
            catch (Exception ex)
            {
                ConexionInformix.Close();
                res.Codigo = 1;
                res.Mensaje = ex.Message;
                res.Nombre = procedimiento.ValorMostar;
            }

            return res;
        }
    }
}
